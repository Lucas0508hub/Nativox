version: '3.8'

services:
  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: nativox-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - nativox-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: nativox-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-nativox}
      POSTGRES_USER: ${POSTGRES_USER:-nativox}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
      - ./migrations:/docker-entrypoint-initdb.d/migrations:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-nativox} -d ${POSTGRES_DB:-nativox}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - nativox-network
    # Don't expose port externally - only accessible via nginx

  # AudioSeg Application
  app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: nativox-app
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER:-nativox}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-nativox}
      SESSION_SECRET: ${SESSION_SECRET}
      PORT: 5000
      # Cloud Storage Configuration
      STORAGE_PROVIDER: ${STORAGE_PROVIDER:-aws-s3}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
      AWS_S3_REGION: ${AWS_S3_REGION:-us-east-1}
      # File Upload Configuration
      MAX_FILE_SIZE: ${MAX_FILE_SIZE:-500MB}
      UPLOAD_DIR: /app/uploads
      TEMP_UPLOAD_DIR: /app/temp-uploads
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_DIR: /app/logs
    volumes:
      - uploads_data:/app/uploads
      - temp_uploads_data:/app/temp-uploads
      - app_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - nativox-network

  # Redis for Session Storage (Optional - for scaling)
  redis:
    image: redis:7-alpine
    container_name: nativox-redis
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - nativox-network
    # Don't expose port externally

  # Monitoring with Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: nativox-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - nativox-network

  # Grafana for Dashboards (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: nativox-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
    restart: unless-stopped
    networks:
      - nativox-network

volumes:
  postgres_data:
    driver: local
  uploads_data:
    driver: local
  temp_uploads_data:
    driver: local
  app_logs:
    driver: local
  nginx_logs:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  nativox-network:
    driver: bridge
